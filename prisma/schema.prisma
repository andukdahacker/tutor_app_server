// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(cuid())
  username              String           @db.VarChar
  email                 String           @unique @db.VarChar
  password              String           @db.VarChar
  isVerified            Boolean          @default(false)
  avatar                String?
  learnerProfile        LearnerProfile?
  tutorProfile          TutorProfile?
  notificationNotifier  Notification[]   @relation("notifier")
  notificationsReceiver Notification[]   @relation("receiver")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  message               ChatMessage[]
  chatMembers           ChatMember[]
  rater                 Rating[]         @relation("rater")
  rated                 Rating[]         @relation("rated")
  workExperience        WorkExperience[]
  education             Education[]
  requester             Relationship[]   @relation("requester")
  addressee             Relationship[]   @relation("addressee")
  schedule              Schedule?
}

model Relationship {
  requester    User     @relation("requester", fields: [requester_id], references: [id], onDelete: Cascade)
  requester_id String
  addressee    User     @relation("addressee", fields: [addressee_id], references: [id], onDelete: Cascade)
  addressee_id String
  chat         Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([requester_id, addressee_id])
}

model LearnerProfile {
  id       String  @id @default(cuid())
  bio      String? @db.VarChar(200)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
  jobs     Job[]
  jobTitle String?
  avatar   String?
}

model Subject {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  jobs                Job[]
  tutorProfileSubject TutorProfileSubject[]
}

model Job {
  id             String          @id @default(cuid())
  learner        LearnerProfile  @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId      String
  subject        Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId      String
  title          String
  description    String?
  createdAt      DateTime        @default(now())
  fee            BigInt
  jobType        JobType
  jobMethod      JobMethod
  jobStatus      JobStatus       @default(OPEN)
  duration       Int?
  updatedAt      DateTime        @updatedAt
  jobConnections JobConnection[]
  ratings        Rating[]
  userEvent      UserEvent[]
}

enum JobStatus {
  OPEN
  EMPLOYED
  DONE
}

enum JobType {
  QA
  TUTOR
}

enum JobMethod {
  ONLINE
  OFFLINE
  BOTH
}

model JobConnection {
  job       Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  tutor     TutorProfile      @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId   String
  status    ConnectionStatus
  type      JobConnectionType
  createdAt DateTime          @default(now())

  @@id([jobId, tutorId])
}

model TutorProfile {
  id                  String                @id @default(cuid())
  bio                 String?               @db.VarChar(200)
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String                @unique
  jobConnections      JobConnection[]
  tutorProfileSubject TutorProfileSubject[]
}

model WorkExperience {
  id           String   @id @default(cuid())
  position     String
  workplace    String
  workplaceUrl String?
  description  String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  fromDate     DateTime
  toDate       DateTime
}

model Education {
  id                 String   @id @default(cuid())
  educationEntity    String
  educationEntityUrl String?
  fromDate           DateTime
  toDate             DateTime
  description        String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
}

model Rating {
  score     Int
  comment   String?
  rater     User     @relation(fields: [raterId], references: [id], onDelete: Cascade, "rater")
  raterId   String
  rated     User     @relation(fields: [ratedId], references: [id], onDelete: Cascade, "rated")
  ratedId   String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([ratedId, raterId, jobId])
}

model TutorProfileSubject {
  tutor     TutorProfile @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId   String
  subject   Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String

  @@id([tutorId, subjectId])
}

enum ConnectionStatus {
  REQUESTED
  ACCEPTED
  DECLINED
}

enum JobConnectionType {
  TUTOR_TO_JOB
  JOB_TO_TUTOR
}

model Notification {
  id               String           @id @default(cuid())
  notificationType NotificationType
  notifier         User?            @relation("notifier", fields: [notifierId], references: [id], onDelete: Cascade)
  notifierId       String?
  receiver         User             @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId       String
  itemId           String?
  isRead           Boolean          @default(false)
  createdAt        DateTime         @default(now())
}

enum NotificationType {
  TUTOR_REQUEST
  TUTOR_ACCEPT
  TUTOR_DECLINE
  LEARNER_REQUEST
  LEARNER_ACCEPT
  LEARNER_DECLINE
}

model ChatMessage {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  content   String?  @db.Text
  file      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id            String         @id @default(cuid())
  messages      ChatMessage[]
  chatMembers   ChatMember[]
  relationships Relationship[]
  updatedAt     DateTime       @updatedAt
}

model ChatMember {
  member   User      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String
  chat     Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String
  isRead   Boolean   @default(true)
  isViewed Boolean   @default(true)
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  @@id([memberId, chatId])
}

model Schedule {
  id                String              @id @default(cuid())
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String              @unique
  userEventSchedule UserEventSchedule[]
}

model UserEvent {
  id                String              @id @default(cuid())
  startTime         DateTime
  endTime           DateTime
  userEventSchedule UserEventSchedule[]
  userEventStatus   UserEventStatus
  job               Job                 @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId             String
}

enum UserEventStatus {
  REQUESTED
  ACCEPTED
  PRESENT
  DONE
}

model UserEventSchedule {
  schedule   Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId String
  userEvent  UserEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String

  @@id([scheduleId, eventId])
}
