// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(cuid())
  username              String           @db.VarChar
  email                 String           @unique @db.VarChar
  password              String           @db.VarChar
  isVerified            Boolean          @default(false)
  learnerProfile        LearnerProfile?
  tutorProfile          TutorProfile?
  notificationNotifier  Notification[]   @relation("notifier")
  notificationsReceiver Notification[]   @relation("receiver")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  message               ChatMessage[]
  chatMembers           ChatMember[]
  rater                 Rating[]         @relation("rater")
  rated                 Rating[]         @relation("rated")
  workExperience        WorkExperience[]
  education             Education[]
}

model LearnerProfile {
  id       String  @id @default(cuid())
  bio      String? @db.VarChar(200)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique
  jobs     Job[]
  jobTitle String?
  avatar   String?
}

model Subject {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  jobs                Job[]
  tutorProfileSubject TutorProfileSubject[]
}

model Job {
  id             String          @id @default(cuid())
  learner        LearnerProfile  @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  learnerId      String
  subject        Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId      String
  title          String
  description    String?
  createdAt      DateTime        @default(now())
  fee            Decimal         @db.Money
  jobType        JobType
  jobMethod      JobMethod
  duration       Int?
  updatedAt      DateTime        @updatedAt
  jobConnections JobConnection[]
  ratings        Rating[]
}

enum JobType {
  QA
  TUTOR
}

enum JobMethod {
  ONLINE
  OFFLINE
  BOTH
}

model JobConnection {
  job       Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  tutor     TutorProfile      @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId   String
  status    ConnectionStatus
  type      JobConnectionType
  createdAt DateTime          @default(now())

  @@id([jobId, tutorId])
}

model TutorProfile {
  id                  String                @id @default(cuid())
  bio                 String?               @db.VarChar(200)
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String                @unique
  jobConnections      JobConnection[]
  tutorProfileSubject TutorProfileSubject[]
}

model WorkExperience {
  id           String   @id @default(cuid())
  position     String
  workplace    String
  workplaceUrl String?
  description  String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  fromDate     DateTime
  toDate       DateTime
}

model Education {
  id                 String   @id @default(cuid())
  educationEntity    String
  educationEntityUrl String?
  fromDate           DateTime
  toDate             DateTime
  description        String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
}

model Rating {
  score     Int
  comment   String?
  rater     User     @relation(fields: [raterId], references: [id], onDelete: Cascade, "rater")
  raterId   String
  rated     User     @relation(fields: [ratedId], references: [id], onDelete: Cascade, "rated")
  ratedId   String
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([ratedId, raterId, jobId])
}

model TutorProfileSubject {
  tutor     TutorProfile @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId   String
  subject   Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String

  @@id([tutorId, subjectId])
}

enum ConnectionStatus {
  REQUESTED
  ACCEPTED
  DECLINED
}

enum JobConnectionType {
  TUTOR_TO_JOB
  JOB_TO_TUTOR
}

model Notification {
  id               String           @id @default(cuid())
  notificationType NotificationType
  notifier         User?            @relation("notifier", fields: [notifierId], references: [id], onDelete: Cascade)
  notifierId       String?
  receiver         User             @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId       String
  itemId           String?
  isRead           Boolean          @default(false)
  createdAt        DateTime         @default(now())
}

enum NotificationType {
  TUTOR_REQUEST
  TUTOR_ACCEPT
  TUTOR_DECLINE
  LEARNER_REQUEST
  LEARNER_ACCEPT
  LEARNER_DECLINE
}

model ChatMessage {
  id        String   @id @default(cuid())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id          String        @id @default(cuid())
  message     ChatMessage[]
  chatMembers ChatMember[]
}

model ChatMember {
  member   User      @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String
  chat     Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String
  isRead   Boolean   @default(true)
  isViewed Boolean   @default(true)
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  @@id([memberId, chatId])
}
