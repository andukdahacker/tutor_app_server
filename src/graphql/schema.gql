# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  username: String!
  email: String!
  avatar: String
  isVerified: Boolean!
  createdAt: DateScalar!
  updatedAt: DateScalar
}

type LoginResponse {
  access_token: String!
  user: User!
}

type LogoutResponse {
  message: String!
}

type MeResponse {
  user: User
}

type RefreshAccessTokenResponse {
  access_token: String!
}

type SignUpResponse {
  user: User!
}

type ChatMember {
  isRead: Boolean!
  isViewed: Boolean!
  joinedAt: DateScalar!
  leftAt: DateScalar
}

type ChatMessage {
  id: String!
  author: User!
  content: String!
  createdAt: DateScalar!
  updatedAt: DateScalar
}

type Chat {
  id: String!
  chatMembers: [ChatMember!]!
  chatMessages: [ChatMessage]
  updatedAt: DateScalar!
}

type PageInfo {
  hasNextPage: Boolean!
  cursor: Cursor
  lastTake: Int!
  totalAmount: Int!
}

union Cursor = StringCursor | IntCursor

type StringCursor {
  value: String
}

type IntCursor {
  value: Int
}

type GetChatsResponse {
  nodes: [Chat!]!
  pageInfo: PageInfo!
}

type GetMessagesResponse {
  nodes: [ChatMessage!]!
  pageInfo: PageInfo!
}

type Notification {
  id: String!
  notificationType: NotificationType!
  notifier: User
  itemId: String
  isRead: Boolean!
  createdAt: DateScalar!
}

enum NotificationType {
  TUTOR_REQUEST
  TUTOR_ACCEPT
  TUTOR_DECLINE
  LEARNER_REQUEST
  LEARNER_ACCEPT
  LEARNER_DECLINE
}

type GetManyNotificationsResponse {
  nodes: [Notification!]!
  pageInfo: PageInfo!
}

type JobConnection {
  jobId: String!
  tutorId: String!
  status: ConnectionStatus!
  type: JobConnectType!
}

enum ConnectionStatus {
  REQUESTED
  ACCEPTED
  DECLINED
}

enum JobConnectType {
  TUTOR_TO_JOB
  JOB_TO_TUTOR
}

type AcceptJobConnectionResponse {
  jobConnection: JobConnection
}

type CreateJobConnectResponse {
  jobConnection: JobConnection
}

type DeclineJobConnectinoResponse {
  jobConnection: JobConnection
}

type GetRequestedJobsForTutorResponse {
  nodes: [JobConnection!]!
  pageInfo: PageInfo!
}

type Education {
  id: String!
  educationEntity: String!
  educationEntityUrl: String
  fromDate: DateScalar!
  toDate: DateScalar!
  description: String
}

type LearnerProfile {
  id: String!
  bio: String
  userId: String!
}

type Subject {
  id: String!
  name: String!
  description: String
}

type Job {
  id: String!
  learner: LearnerProfile!
  subject: Subject!
  title: String!
  description: String
  fee: BigInt!
  numberOfSessions: Int
  createdAt: Timestamp!
  updatedAt: Timestamp!
  connections: [JobConnection]
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type CreateJobResponse {
  job: Job
}

type FindJobResponse {
  nodes: [Job!]!
  pageInfo: PageInfo!
}

type CreateLeanerProfileResponse {
  leanerProfile: LearnerProfile
}

type UpdateLearnerProfileResponse {
  learnerProfile: LearnerProfile
}

type Rating {
  score: Int!
  comment: String
  rater: User!
  rated: User!
  job: Job!
  createdAt: DateScalar!
  updatedAt: DateScalar
}

type Schedule {
  id: String!
  user: User!
}

type CreateSubjectResponse {
  subject: Subject
}

type FindManySubjectsRespones {
  nodes: [Subject!]!
  pageInfo: PageInfo!
}

type TutorProfile {
  id: String!
  bio: String
  user: User!
  jobConnections: [JobConnection]
  tutorProfileSubjects: [TutorProfileSubject]
}

type TutorProfileSubject {
  tutor: TutorProfile
  subject: Subject
}

type FindManyTutorProfilesResponse {
  nodes: [TutorProfile!]!
  pageInfo: PageInfo!
}

type UserEvent {
  id: String!
  startTime: DateScalar!
  endTime: DateScalar!
  job: Job
  userEventStatus: String!
}

type WorkExperience {
  id: String!
  position: String!
  workplace: String!
  workplaceUrl: String
  fromDate: DateScalar!
  toDate: DateScalar!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar DateScalar

type Query {
  me: MeResponse!
  jobConnections(jobConnectionWhereInput: JobConnectionWhereInput!): GetRequestedJobsForTutorResponse!
  getManyNotifications(getManyNotificationsInput: GetManyNotificationsInput!): GetManyNotificationsResponse!
  chats(getChatInput: GetChatsInput!): GetChatsResponse!
  messages(getChatMessagesInput: GetChatMessagesInput!): GetMessagesResponse!
  jobs(findManyJobsInput: FindManyJobsInput!): FindJobResponse!
  subjects(findManySubjectsInput: FindManySubjectsInput!): FindManySubjectsRespones!
  tutorProfiles(findManyTutorProfilesInput: FindManyTutorProfilesInput!): FindManyTutorProfilesResponse!
}

input JobConnectionWhereInput {
  take: Int!
  stringCursor: String
  tutorId: String
  jobId: String
  type: String
  status: String
}

input GetManyNotificationsInput {
  take: Int!
  stringCursor: String
}

input GetChatsInput {
  take: Int!
  stringCursor: String
}

input GetChatMessagesInput {
  take: Int!
  stringCursor: String
  chatId: String!
}

input FindManyJobsInput {
  take: Int!
  stringCursor: String
  searchString: String!
  fee: Int
  jobType: String
  jobMethod: JobMethod
  sortBy: SortBy!
}

enum JobMethod {
  ONLINE
  OFFLINE
  BOTH
}

enum SortBy {
  asc
  desc
}

input FindManySubjectsInput {
  take: Int!
  stringCursor: String
  searchString: String!
}

input FindManyTutorProfilesInput {
  take: Int!
  stringCursor: String
  searchString: String!
}

type Mutation {
  login(loginInput: LoginInput!): LoginResponse!
  signUp(signUpInput: SignUpInput!): SignUpResponse!
  refreshAccessToken: RefreshAccessTokenResponse!
  logout: LogoutResponse!
  verifyEmail(token: String!): User!
  forgotPassword(email: String!): Boolean!
  changePassword(changePasswordInput: ChangePasswordInput!): User!
  createLearnerProfile(createLearnerProfileInput: CreateLearnerProfileInput!): CreateLeanerProfileResponse!
  updateLearnerProfile(updateLearnerProfileInput: UpdateLearnerProfileInput!): UpdateLearnerProfileResponse!
  createJobConnection(createJobConnectInput: CreateJobConnectInput!): CreateJobConnectResponse!
  acceptJobConnection(acceptJobConnectionInput: AcceptJobConnectionInput!, connectionType: String!): AcceptJobConnectionResponse!
  declineJobConnection(declineJobConnectionInput: DeclineJobConnectionInput!): DeclineJobConnectinoResponse!
  createChat(createChatInput: CreateChatInput!): Chat!
  createMessage(createMessageInput: CreateMessageInput!): ChatMessage!
  editChatMessage(editChatMessageInput: EditChatMessageInput!): ChatMessage!
  deleteChatMessage(deleteChatMessageInput: DeleteChatMessageInput!): ChatMessage!
  createJob(createJob: CreateJobInput!): CreateJobResponse!
  createSubject(createSubjectInput: CreateSubjectInput!): CreateSubjectResponse!
  createTutorProfile(createTutorProfileInput: CreateTutorProfileInput!): TutorProfile
  updateTutorProfile(updateTutorProfileInput: UpdateTutorProfileInput!): TutorProfile
  createWorkExperience(createWorkExperienceInput: CreateWorkExperienceInput!): WorkExperience!
  updateWorkExperience(updateWorkExperienceInput: UpdateWorkExperienceInput!): WorkExperience!
  deleteWorkExperience(workExperienceId: String!): WorkExperience!
  createEducation(createEducationInput: CreateEducationInput!): Education!
  updateEducation(updateEducationInput: UpdateEducationInput!): Education!
  deleteEducation(educationId: String!): Education!
  createRating(createRatingInput: CreateRatingInput!): Rating!
  updateRating(updateRatingInput: UpdateRatingInput!): Rating!
  deleteRating(deleteRatingInput: DeleteRatingInput!): Rating!
  createUserEvent(createUserEventInput: CreateUserEventInput!): UserEvent!
  acceptUserEvent(acceptUserEventInput: AcceptUserEventInput!): UserEvent!
}

input LoginInput {
  email: String!
  password: String!
}

input SignUpInput {
  username: String
  email: String
  password: String
}

input ChangePasswordInput {
  token: String!
  password: String!
}

input CreateLearnerProfileInput {
  bio: String!
}

input UpdateLearnerProfileInput {
  bio: String
}

input CreateJobConnectInput {
  jobId: String!
  tutorUserId: String!
  tutorId: String!
  learnerUserId: String!
  type: String!
}

input AcceptJobConnectionInput {
  jobId: String
  tutorUserId: String
  tutorId: String
  learnerUserId: String
  type: String
}

input DeclineJobConnectionInput {
  jobId: String
  tutorUserId: String
  tutorId: String
  learnerUserId: String
  type: String
}

input CreateChatInput {
  receiverId: String!
  message: String
}

input CreateMessageInput {
  content: String!
  chatId: String!
}

input EditChatMessageInput {
  chatId: String!
  chatMessageId: String!
  chatMessage: String!
}

input DeleteChatMessageInput {
  chatId: String!
  chatMessageId: String!
}

input CreateJobInput {
  learnerId: String!
  subjectId: String!
  description: String
  fee: BigInt!
  title: String!
  numberOfSessions: Int
  jobType: String!
  jobMethod: String!
}

input CreateSubjectInput {
  name: String!
  description: String
}

input CreateTutorProfileInput {
  bio: String!
}

input UpdateTutorProfileInput {
  bio: String
}

input CreateWorkExperienceInput {
  position: String!
  workplace: String!
  workplaceUrl: String
  description: String
  fromDate: DateScalar!
  toDate: DateScalar!
}

input UpdateWorkExperienceInput {
  position: String
  workplace: String
  workplaceUrl: String
  description: String
  fromDate: DateScalar
  toDate: DateScalar
  workExperienceId: String!
}

input CreateEducationInput {
  educationEntity: String
  educationEntityUrl: String
  fromDate: DateScalar
  toDate: DateScalar
  description: String
}

input UpdateEducationInput {
  id: String
  educationEntity: String
  educationEntityUrl: String
  fromDate: DateScalar
  toDate: DateScalar
  description: String
}

input CreateRatingInput {
  score: Float!
  raterId: String!
  ratedId: String!
  jobId: String!
  comment: String
}

input UpdateRatingInput {
  score: Float
  raterId: String
  ratedId: String
  jobId: String
  comment: String
}

input DeleteRatingInput {
  jobId: String!
  raterId: String!
  ratedId: String!
}

input CreateUserEventInput {
  jobId: String!
  startTime: DateScalar!
  endTime: DateScalar!
}

input AcceptUserEventInput {
  jobId: String!
  userEventId: String!
  myScheduleId: String!
  otherScheduleId: String!
}

type Subscription {
  subscribeNotifications(userId: String!): Notification!
  subscribeChatMessages: ChatMessage!
}